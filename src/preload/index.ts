import { contextBridge, ipcRenderer } from 'electron'
import { electronAPI } from '@electron-toolkit/preload'

// Custom APIs for renderer
const api = {
  // Â¶ÇÊûúÊú™Êù•ÈúÄË¶Å‰ªéÊ∏≤ÊüìËøõÁ®ãÊéßÂà∂Á™óÂè£ÔºåÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä† IPC ÈÄö‰ø°ÊñπÊ≥ï
  // ÁõÆÂâçÊâÄÊúâÂø´Êç∑ÈîÆÈÉΩÂú®‰∏ªËøõÁ®ãÂ§ÑÁêÜÔºåÊ∏≤ÊüìËøõÁ®ãÊó†ÈúÄÈ¢ùÂ§ñ API
  
  // Ëé∑ÂèñÂπ≥Âè∞‰ø°ÊÅØÔºåÁî®‰∫éÊòæÁ§∫Ê≠£Á°ÆÁöÑÂø´Êç∑ÈîÆËØ¥Êòé
  getPlatform: () => process.platform,
  
  // Ê£ÄÊü•ÊòØÂê¶ÊòØÂºÄÂèëÁéØÂ¢É
  isDev: () => process.env.NODE_ENV === 'development',
  
  // ÁõëÂê¨ÂêåÊ≠•ÂÜÖÂÆπËß¶Âèë‰∫ã‰ª∂Ôºà‰ªé‰∏ªËøõÁ®ãÁöÑÂÖ®Â±ÄÂø´Êç∑ÈîÆÔºâ
  onTriggerSyncContent: (callback: () => void) => {
    // ÂÖàÁßªÈô§ÊâÄÊúâÊóßÁöÑÁõëÂê¨Âô®ÔºåÁ°Æ‰øùÂè™Êúâ‰∏Ä‰∏™ÁõëÂê¨Âô®
    ipcRenderer.removeAllListeners('trigger-sync-content')
    ipcRenderer.on('trigger-sync-content', callback)
    console.log('üîß [Preload] Â∑≤Ê≥®ÂÜå trigger-sync-content ÁõëÂê¨Âô®')
  },
  
  // ÁßªÈô§ÂêåÊ≠•ÂÜÖÂÆπÁõëÂê¨Âô®
  offTriggerSyncContent: (callback: () => void) => {
    ipcRenderer.off('trigger-sync-content', callback)
    console.log('üîß [Preload] Â∑≤ÁßªÈô§ trigger-sync-content ÁõëÂê¨Âô®')
  }
}

// Use `contextBridge` APIs to expose Electron APIs to
// renderer only if context isolation is enabled, otherwise
// just add to the DOM global.
if (process.contextIsolated) {
  try {
    contextBridge.exposeInMainWorld('electron', electronAPI)
    contextBridge.exposeInMainWorld('api', api)
  } catch (error) {
    console.error(error)
  }
} else {
  // @ts-ignore (define in dts)
  window.electron = electronAPI
  // @ts-ignore (define in dts)
  window.api = api
}
